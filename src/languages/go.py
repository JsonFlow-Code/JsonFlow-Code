from engine.generator import LanguageGenerator
from engine.workflow import Workflow
from utils.logger import get_logger
from config.config import Config

class GoGenerator(LanguageGenerator):
    def __init__(self):
        super().__init__()
        self.logger = get_logger("go_generator")
        self.config = Config()
        self._indent_level = self.config.get("generator.indent_level", 4)

    def generate(self, workflow: Workflow) -> str:
        self.logger.info(f"Generating Go code for workflow: {workflow.function}")
        try:
            code = [
                "// Generated by JSONFlow GoGenerator",
                "package main",
                "",
                "import (",
                "    \"fmt\"",
                "    \"strings\"",
                ")",
                "",
                f"// Workflow: {workflow.function}",
                f"// Description: {workflow.metadata.get('description', 'N/A')}",
                f"// Schema Version: {workflow.metadata.get('schema_version', '1.1.0')}",
                "func main() {",
                "    context := make(map[string]string)",
                ""
            ]
            for step in workflow.steps:
                code.append(self.generate_step(step, indent=1))
            code.append("}")
            return "\n".join(code)
        except Exception as e:
            self.logger.error(f"Go code generation failed: {str(e)}")
            raise ValueError(f"Go code generation failed: {str(e)}")

    def generate_step(self, step: dict, indent: int) -> str:
        step_type = step.get('type')
        if step_type == 'set':
            code = self.generate_set(step)
        elif step_type == 'if':
            code = self.generate_if(step)
        else:
            code = f"    // Unsupported step type: {step_type}"
        return self._indent_code(code, indent)

    def generate_set(self, step: dict) -> str:
        target = step.get('target')
        if not isinstance(target, str) or not target:
            raise ValueError("Invalid or missing target in set step")
        value = step.get('value', '""')
        return f"context[\"{target}\"] = \"{value}\""

    def generate_if(self, step: dict) -> str:
        condition = step.get('condition', "false")
        then_steps = step.get('then', [])
        then_code = "\n".join(self.generate_step(s, indent=2) for s in then_steps)
        return f"if {condition} {{\n{then_code}\n    }}"

    def _indent_code(self, code: str, indent: int) -> str:
        indent_str = " " * (indent * self._indent_level)
        return "\n".join(indent_str + line for line in code.split("\n") if line.strip())

def register_go_generator():
    from engine.generator import register_generator
    register_generator('go', GoGenerator)