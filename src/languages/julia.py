from typing import Dict, Any, Optional
from engine.generator import LanguageGenerator, GeneratorError, register_generator
from engine.workflow import Workflow
from utils.logger import get_logger
from config.config import Config
import re

class JuliaGenerator(LanguageGenerator):
    """Julia-specific code generator for JSONFlow workflows, optimized for AI tasks."""
    
    def __init__(self):
        super().__init__()
        self.logger = get_logger("julia_generator")
        self.config = Config()
        self._indent_level = self.config.get("generator.indent_level", 4)
    
    def generate(self, workflow: Workflow) -> str:
        """
        Generate Julia code for a workflow, initializing context and processing steps.

        Args:
            workflow: Workflow object containing function, schema, and steps.

        Returns:
            str: Generated Julia code.

        Raises:
            GeneratorError: If code generation fails due to invalid workflow or step.
        """
        self.logger.info(f"Generating Julia code for workflow: {workflow.function}")
        
        try:
            # Initialize code with module imports and context
            code = [
                "# Generated by JSONFlow JuliaGenerator",
                "using JSON",
                "",
                f"function {workflow.function}()",
                "    context = Dict{String, Any}()"
            ]
            
            # Initialize inputs with defaults or type-based fallbacks
            inputs = workflow.schema.get('inputs', {})
            for key, spec in inputs.items():
                if not isinstance(spec, dict):
                    self.logger.warning(f"Invalid input spec for {key}")
                    continue
                default = spec.get('default')
                if default is None:
                    type_map = {
                        "string": "\"\"",
                        "integer": "0",
                        "number": "0.0",
                        "boolean": "false",
                        "object": "Dict{String, Any}()",
                        "array": "Any[]",
                        "null": "nothing"
                    }
                    default = type_map.get(spec.get('type', 'null'), 'nothing')
                else:
                    default = self._format_value(default, spec.get('type', 'null'))
                code.append(f"    context[\"{key}\"] = {default}")
            
            # Generate code for each step
            for step in workflow.steps:
                code.append(self.generate_step(step, indent=1))
            
            # Return final context
            code.append("    return context")
            code.append("end")
            
            # Add main execution block
            code.append("")
            code.append(f"result = {workflow.function}()")
            code.append("println(JSON.json(result))")
            
            return "\n".join(filter(None, code))  # Remove empty lines
        
        except Exception as e:
            self.logger.error(f"Julia code generation failed: {str(e)}")
            raise GeneratorError(f"Julia code generation failed: {str(e)}")
    
    def generate_blockchain_operation(self, step: Dict[str, Any], indent: int) -> str:
        """
        Generate Julia code for a blockchain_operation step.

        Supports Ethereum transfers; other chains/actions return comments.
        """
        chain = step.get('chain')
        action = step.get('action')
        params = step.get('params', {})
        target = step.get('target')
        
        if chain == "ethereum" and action == "transfer":
            to_address = params.get('to')
            value = params.get('value')
            if not to_address or not re.match(r'^0x[a-fA-F0-9]{40}$', to_address):
                raise GeneratorError(f"Invalid Ethereum address: {to_address}")
            if not value or not isinstance(value, (int, str, float)):
                raise GeneratorError(f"Invalid value for transfer: {value}")
            sender = 'get(context, "sender", "0x0000000000000000000000000000000000000000")'
            indent_str = " " * (indent * self._indent_level)
            return f"{indent_str}context[\"{target}\"] = simulate_transfer(\"{to_address}\", {value}, {sender}) # Simulated transfer"
        indent_str = " " * (indent * self._indent_level)
        return f"{indent_str}# Unsupported blockchain operation: {chain} {action}"
    
    def generate_if(self, step: Dict[str, Any], indent: int) -> str:
        """Generate Julia code for an if step with safe context access."""
        condition = self._safe_format_expr(step['condition'])
        indent_str = " " * (indent * self._indent_level)
        then_code = "\n".join(self.generate_step(s, indent + 1) for s in step['then'])
        else_code = "\n".join(self.generate_step(s, indent + 1) for s in step.get('else', []))
        code = [f"{indent_str}if {condition}", then_code, f"{indent_str}end"]
        if else_code:
            code.insert(-1, f"{indent_str}else")
            code.insert(-1, else_code)
        return "\n".join(code)
    
    def generate_set(self, step: Dict[str, Any], indent: int) -> str:
        """Generate Julia code for a set step, storing in context."""
        target = step.get('target')
        if not isinstance(target, str) or not target:
            raise GeneratorError("Invalid or missing target in set step")
        value = self._safe_format_expr(step['value'])
        indent_str = " " * (indent * self._indent_level)
        return f"{indent_str}context[\"{target}\"] = {value}"
    
    def generate_return(self, step: Dict[str, Any], indent: int) -> str:
        """Generate Julia code for a return step."""
        value = self._safe_format_expr(step['value'])
        indent_str = " " * (indent * self._indent_level)
        return f"{indent_str}return {value}"
    
    def generate_try(self, step: Dict[str, Any], indent: int) -> str:
        """Generate Julia code for a try step with error handling."""
        body_code = "\n".join(self.generate_step(s, indent + 1) for s in step['body'])
        catch = step.get('catch', {})
        catch_code = "\n".join(self.generate_step(s, indent + 1) for s in catch.get('body', [])) if catch else ""
        indent_str = " " * (indent * self._indent_level)
        code = [f"{indent_str}try", body_code]
        if catch_code:
            error_var = catch.get('error_var', 'e')
            if not re.match(r'^[a-zA-Z_][a-zA-Z0-9_]*$', error_var):
                raise GeneratorError(f"Invalid error variable name: {error_var}")
            code.append(f"{indent_str}catch {error_var}")
            code.append(f"{indent_str}    context[\"{error_var}\"] = string({error_var})")
            code.append(catch_code)
        code.append(f"{indent_str}end")
        return "\n".join(code)
    
    def generate_while(self, step: Dict[str, Any], indent: int) -> str:
        """Generate Julia code for a while step."""
        condition = self._safe_format_expr(step['condition'])
        body_code = "\n".join(self.generate_step(s, indent + 1) for s in step['body'])
        indent_str = " " * (indent * self._indent_level)
        return f"{indent_str}while {condition}\n{body_code}\n{indent_str}end"
    
    def generate_foreach(self, step: Dict[str, Any], indent: int) -> str:
        """Generate Julia code for a foreach step."""
        collection = self._safe_format_expr(step['collection'])
        iterator = step['iterator']
        if not re.match(r'^[a-zA-Z_][a-zA-Z0-9_]*$', iterator):
            raise GeneratorError(f"Invalid iterator name: {iterator}")
        body_code = "\n".join(self.generate_step(s, indent + 1) for s in step['body'])
        indent_str = " " * (indent * self._indent_level)
        return f"{indent_str}for {iterator} in {collection}\n{indent_str}    context[\"{iterator}\"] = {iterator}\n{body_code}\n{indent_str}end"
    
    def generate_assert(self, step: Dict[str, Any], indent: int) -> str:
        """Generate Julia code for an assert step."""
        condition = self._safe_format_expr(step['condition'])
        message = step.get('message', 'Assertion failed')
        if not isinstance(message, str):
            raise GeneratorError("Assert message must be a string")
        indent_str = " " * (indent * self._indent_level)
        return f"{indent_str}@assert {condition} \"{message}\""
    
    def generate_ai_infer(self, step: Dict[str, Any], indent: int) -> str:
        """Generate Julia code for an ai_infer step, optimized for AI tasks."""
        model = step.get('model')
        input_data = self._safe_format_expr(step['input'])
        target = step.get('target')
        if not model or not target:
            raise GeneratorError("Missing model or target in ai_infer step")
        indent_str = " " * (indent * self._indent_level)
        return f"{indent_str}context[\"{target}\"] = simulate_ai_infer(\"{model}\", {input_data}) # Simulated AI inference"
    
    def generate_call_workflow(self, step: Dict[str, Any], indent: int) -> str:
        """Generate Julia code for a call_workflow step (simulated)."""
        workflow_id = step.get('workflow')
        target = step.get('target')
        if not workflow_id or not target:
            raise GeneratorError("Missing workflow or target in call_workflow step")
        args = ", ".join(f"\"{k}\" => {self._safe_format_expr(v)}" for k, v in step.get('args', {}).items())
        indent_str = " " * (indent * self._indent_level)
        return f"{indent_str}context[\"{target}\"] = simulate_workflow(\"{workflow_id}\", Dict({args})) # Simulated workflow call"
    
    def _safe_format_expr(self, expr: Any) -> str:
        """
        Format an expression safely, converting context access to safe dictionary access.

        Args:
            expr: Expression object or value from schema.

        Returns:
            str: Julia-compatible expression string.
        """
        formatted = self._format_expr(expr)
        # Convert context.get("key") to get(context, "key", nothing)
        formatted = re.sub(
            r"context\.get\(['\"](.*?)['\"]\)",
            r"get(context, \"\1\", nothing)",
            formatted
        )
        return formatted
    
    def _format_value(self, value: Any, json_type: str) -> str:
        """Format a value for Julia initialization."""
        if json_type == "string":
            return f"\"{value}\"" if isinstance(value, str) else "\"\""
        elif json_type == "integer":
            return str(value) if isinstance(value, int) else "0"
        elif json_type == "number":
            return str(value) if isinstance(value, (int, float)) else "0.0"
        elif json_type == "boolean":
            return "true" if value else "false"
        elif json_type == "object":
            return "Dict{String, Any}()"
        elif json_type == "array":
            return "Any[]"
        return "nothing"
    
    def _indent_code(self, code: str, indent: int) -> str:
        """Indent code with configured indent level."""
        indent_str = " " * (indent * self._indent_level)
        return "\n".join(indent_str + line for line in code.split("\n") if line.strip())

# Register the generator
register_generator('julia', JuliaGenerator)