from typing import Dict, Any, Optional
from engine.generator import LanguageGenerator, GeneratorError, register_generator
from engine.workflow import Workflow
from utils.logger import get_logger
from config.config import Config
import re

class PerlGenerator(LanguageGenerator):
    """Perl-specific code generator for JSONFlow workflows, leveraging regex capabilities."""
    
    def __init__(self):
        super().__init__()
        self.logger = get_logger("perl_generator")
        self.config = Config()
        self._indent_level = self.config.get("generator.indent_level", 4)
    
    def generate(self, workflow: Workflow) -> str:
        """
        Generate Perl code for a workflow, initializing context and processing steps.

        Args:
            workflow: Workflow object containing function, schema, and steps.

        Returns:
            str: Generated Perl code.

        Raises:
            GeneratorError: If code generation fails due to invalid workflow or step.
        """
        self.logger.info(f"Generating Perl code for workflow: {workflow.function}")
        
        try:
            # Initialize code with shebang, strict mode, and context
            code = [
                "#!/usr/bin/perl",
                "# Generated by JSONFlow PerlGenerator",
                "use strict;",
                "use warnings;",
                "use JSON;",
                "",
                f"sub {workflow.function} {{",
                "    my %context;"
            ]
            
            # Initialize inputs with defaults or type-based fallbacks
            inputs = workflow.schema.get('inputs', {})
            for key, spec in inputs.items():
                if not isinstance(spec, dict):
                    self.logger.warning(f"Invalid input spec for {key}")
                    continue
                default = spec.get('default')
                if default is None:
                    type_map = {
                        "string": "''",
                        "integer": "0",
                        "number": "0.0",
                        "boolean": "0",
                        "object": "{}",
                        "array": "[]",
                        "null": "undef"
                    }
                    default = type_map.get(spec.get('type', 'null'), 'undef')
                else:
                    default = self._format_value(default, spec.get('type', 'null'))
                code.append(f"    $context{{'{key}'}} = {default};")
            
            # Generate code for each step
            for step in workflow.steps:
                code.append(self.generate_step(step, indent=1))
            
            # Return final context
            code.append("    return \\%context;")
            code.append("}")
            
            # Add main block to execute the function
            code.append("")
            code.append("my $result = {workflow.function}();")
            code.append("print encode_json($result), \"\\n\";")
            
            return "\n".join(filter(None, code))  # Remove empty lines
        
        except Exception as e:
            self.logger.error(f"Perl code generation failed: {str(e)}")
            raise GeneratorError(f"Perl code generation failed: {str(e)}")
    
    def generate_blockchain_operation(self, step: Dict[str, Any]) -> str:
        """
        Generate Perl code for a blockchain_operation step.

        Supports Ethereum transfers; other chains/actions return comments.
        """
        chain = step.get('chain')
        action = step.get('action')
        params = step.get('params', {})
        target = step.get('target')
        
        if chain == "ethereum" and action == "transfer":
            to_address = params.get('to')
            value = params.get('value')
            if not to_address or not re.match(r'^0x[a-fA-F0-9]{40}$', to_address):
                raise GeneratorError(f"Invalid Ethereum address: {to_address}")
            if not value or not isinstance(value, (int, str, float)):
                raise GeneratorError(f"Invalid value for transfer: {value}")
            sender = "$context{'sender'} // '0x0000000000000000000000000000000000000000'"
            return f"    $context{{'{target}'}} = simulate_transfer('{to_address}', {value}, {sender}); # Simulated transfer"
        return f"    # Unsupported blockchain operation: {chain} {action}"
    
    def generate_if(self, step: Dict[str, Any]) -> str:
        """Generate Perl code for an if step with safe context access."""
        condition = self._safe_format_expr(step['condition'])
        then_code = "\n".join(self.generate_step(s, indent=2) for s in step['then'])
        else_code = "\n".join(self.generate_step(s, indent=2) for s in step.get('else', []))
        code = [f"    if ({condition}) {{", then_code, "    }"]
        if else_code:
            code.append("    else {")
            code.append(else_code)
            code.append("    }")
        return "\n".join(code)
    
    def generate_set(self, step: Dict[str, Any]) -> str:
        """Generate Perl code for a set step, storing in context."""
        target = step.get('target')
        if not isinstance(target, str) or not target:
            raise GeneratorError("Invalid or missing target in set step")
        value = self._safe_format_expr(step['value'])
        return f"    $context{{'{target}'}} = {value};"
    
    def generate_return(self, step: Dict[str, Any]) -> str:
        """Generate Perl code for a return step."""
        value = self._safe_format_expr(step['value'])
        return f"    return {value};"
    
    def generate_try(self, step: Dict[str, Any]) -> str:
        """Generate Perl code for a try step with error handling."""
        body_code = "\n".join(self.generate_step(s, indent=2) for s in step['body'])
        catch = step.get('catch', {})
        catch_code = "\n".join(self.generate_step(s, indent=2) for s in catch.get('body', [])) if catch else ""
        code = ["    eval {", body_code, "    };"]
        if catch_code:
            error_var = catch.get('error_var', 'error')
            if not re.match(r'^[a-zA-Z_][a-zA-Z0-9_]*$', error_var):
                raise GeneratorError(f"Invalid error variable name: {error_var}")
            code.append(f"    if ($@) {{")
            code.append(f"        $context{{'{error_var}'}} = $@;")
            code.append(catch_code)
            code.append("    }")
        return "\n".join(code)
    
    def generate_while(self, step: Dict[str, Any]) -> str:
        """Generate Perl code for a while step."""
        condition = self._safe_format_expr(step['condition'])
        body_code = "\n".join(self.generate_step(s, indent=2) for s in step['body'])
        return f"    while ({condition}) {{\n{body_code}\n    }}"
    
    def generate_foreach(self, step: Dict[str, Any]) -> str:
        """Generate Perl code for a foreach step."""
        collection = self._safe_format_expr(step['collection'])
        iterator = step['iterator']
        if not re.match(r'^[a-zA-Z_][a-zA-Z0-9_]*$', iterator):
            raise GeneratorError(f"Invalid iterator name: {iterator}")
        body_code = "\n".join(self.generate_step(s, indent=2) for s in step['body'])
        return f"    foreach my ${iterator} (@{{{collection}}}) {{\n        $context{{'{iterator}'}} = ${iterator};\n{body_code}\n    }}"
    
    def generate_assert(self, step: Dict[str, Any]) -> str:
        """Generate Perl code for an assert step."""
        condition = self._safe_format_expr(step['condition'])
        message = step.get('message', 'Assertion failed')
        if not isinstance(message, str):
            raise GeneratorError("Assert message must be a string")
        return f"    die \"{message}\" unless ({condition});"
    
    def generate_ai_infer(self, step: Dict[str, Any]) -> str:
        """Generate Perl code for an ai_infer step (simulated)."""
        model = step.get('model')
        input_data = self._safe_format_expr(step['input'])
        target = step.get('target')
        if not model or not target:
            raise GeneratorError("Missing model or target in ai_infer step")
        return f"    $context{{'{target}'}} = simulate_ai_infer('{model}', {input_data}); # Simulated AI inference"
    
    def generate_call_workflow(self, step: Dict[str, Any]) -> str:
        """Generate Perl code for a call_workflow step (simulated)."""
        workflow_id = step.get('workflow')
        target = step.get('target')
        if not workflow_id or not target:
            raise GeneratorError("Missing workflow or target in call_workflow step")
        args = ", ".join(f"'{k}' => {self._safe_format_expr(v)}" for k, v in step.get('args', {}).items())
        return f"    $context{{'{target}'}} = simulate_workflow('{workflow_id}', {{{args}}}); # Simulated workflow call"
    
    def _safe_format_expr(self, expr: Any) -> str:
        """
        Format an expression safely, converting context access to safe hash access.

        Args:
            expr: Expression object or value from schema.

        Returns:
            str: Perl-compatible expression string.
        """
        formatted = self._format_expr(expr)
        # Convert context.get("key") to $context{'key'} // undef
        formatted = re.sub(
            r"context\.get\(['\"](.*?)['\"]\)",
            r"$context{\'\1\'} // undef",
            formatted
        )
        return formatted
    
    def _format_value(self, value: Any, json_type: str) -> str:
        """Format a value for Perl initialization."""
        if json_type == "string":
            return f"'{value}'" if isinstance(value, str) else "''"
        elif json_type == "integer":
            return str(value) if isinstance(value, int) else "0"
        elif json_type == "number":
            return str(value) if isinstance(value, (int, float)) else "0.0"
        elif json_type == "boolean":
            return "1" if value else "0"
        elif json_type == "object":
            return "{}"
        elif json_type == "array":
            return "[]"
        return "undef"
    
    def _indent_code(self, code: str, indent: int) -> str:
        """Indent code with configured indent level."""
        indent_str = " " * (indent * self._indent_level)
        return "\n".join(indent_str + line for line in code.split("\n") if line.strip())

# Register the generator
register_generator('perl', PerlGenerator)