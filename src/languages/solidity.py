import json
import re
from typing import Dict, Any
from engine.generator import LanguageGenerator
from engine.workflow import Workflow
from utils.logger import get_logger
from config.config import Config

class SolidityGenerator(LanguageGenerator):
    def __init__(self):
        super().__init__()
        self.logger = get_logger("solidity_generator")
        self.config = Config()
        self._indent_level = self.config.get("generator.indent_level", 4)
        self._expr_cache = {}

    def generate(self, workflow: Workflow) -> str:
        self.logger.info(f"Generating Solidity code for workflow: {workflow.function}")
        self._expr_cache.clear()
        try:
            code = [
                "// Generated by JSONFlow SolidityGenerator",
                "pragma solidity ^0.8.20;",
                "",
                f"// Workflow: {workflow.function}",
                f"// Description: {workflow.metadata.get('description', 'N/A')}",
                f"// Schema Version: {workflow.metadata.get('schema_version', '1.1.0')}",
                "contract Workflow {",
                "    mapping(string => bytes32) public context;",
                "    address public owner;"
            ]
            events = set(step.get('name') for step in workflow.steps if step.get('type') == 'event')
            for event_name in events:
                code.append(f"    event {event_name}(string indexed key, bytes32 value);")
            code.append("    constructor() {")
            code.append("        owner = msg.sender;")
            code.append("    }")
            is_payable = any(step.get('type') == 'blockchain_operation' for step in workflow.steps)
            code.append(f"    function {workflow.function}() public {'payable ' if is_payable else ''}returns (bytes32) {{")
            code.append("        require(msg.sender == owner, \"Only owner can call this function\");")
            inputs = workflow.schema.get('inputs', {})
            for key, spec in inputs.items():
                if not isinstance(spec, dict) or 'type' not in spec:
                    self.logger.warning(f"Invalid input spec for {key}")
                    continue
                default = spec.get('default')
                constraints = spec.get('constraints', {})
                type_map = {
                    "string": "''",
                    "integer": "0",
                    "number": "0",
                    "boolean": "false",
                    "object": "''",
                    "array": "''",
                    "null": "''"
                }
                if default is None:
                    default = type_map.get(spec.get('type', 'null'), "''")
                else:
                    if 'minLength' in constraints and isinstance(default, str) and len(default) < constraints['minLength']:
                        raise ValueError(f"Default value for {key} violates minLength")
                    if 'pattern' in constraints and isinstance(default, str) and not re.match(constraints['pattern'], default):
                        raise ValueError(f"Default value for {key} violates pattern")
                    if 'enum' in constraints and default not in constraints['enum']:
                        raise ValueError(f"Default value for {key} not in enum")
                    default = json.dumps(default)
                solidity_value = self._to_solidity_value(default, spec.get('type'))
                code.append(f"        context['{key}'] = bytes32({solidity_value});")
                if spec.get('ui'):
                    code.append(f"        // UI for {key}: {json.dumps(spec['ui'])}")
            for invariant in workflow.get('invariants', []):
                condition = self._safe_format_expr(invariant['condition'])
                message = invariant.get('message', 'Invariant failed')
                code.append(f"        require({condition}, \"{message}\");")
            for step in workflow.steps:
                self.logger.debug(f"Generating code for step: {step.get('type')}")
                code.append(self.generate_step(step, indent=2))
            code.append("        return context['result'];")
            code.append("    }")
            code.extend([
                "",
                "    // Simulated helper functions",
                "    function simulateAiInfer(string memory model, bytes32 inputData) internal pure returns (bytes32) {",
                "        return bytes32(keccak256(abi.encodePacked(model, inputData)));",
                "    }",
                "    function simulateWorkflow(string memory id, bytes32 args) internal pure returns (bytes32) {",
                "        return bytes32(keccak256(abi.encodePacked(id, args)));",
                "    }",
                "    function simulateCryptoSign(string memory algorithm, bytes32 data, bytes32 key) internal pure returns (bytes32) {",
                "        return bytes32(keccak256(abi.encodePacked(algorithm, data, key)));",
                "    }",
                "    function simulateCryptoVerify(string memory algorithm, bytes32 data, bytes32 signature, bytes32 key) internal pure returns (bool) {",
                "        return true;",
                "    }",
                "    function simulateQuantumAlgorithm(string memory algorithm, bytes32 params) internal pure returns (bytes32) {",
                "        return bytes32(keccak256(abi.encodePacked(algorithm, params)));",
                "    }",
                "}"
            ])
            return "\n".join(filter(None, code))
        except Exception as e:
            self.logger.error(f"Solidity code generation failed: {str(e)}")
            raise ValueError(f"Solidity code generation failed: {str(e)}")

    def _to_solidity_value(self, value: str, type_hint: str | None) -> str:
        if type_hint == "string":
            return f"bytes32(keccak256(abi.encodePacked({value})))"
        if type_hint in ["integer", "number"]:
            return f"uint256({value})"
        if type_hint == "boolean":
            return "true" if value.lower() == "true" else "false"
        return f"bytes32(keccak256(abi.encodePacked({value})))"

    def generate_step(self, step: Dict[str, Any], indent: int) -> str:
        step_type = step.get('type')
        handlers = {
            'set': self.generate_set,
            'if': self.generate_if,
            'return': self.generate_return,
            'try': self.generate_try,
            'while': self.generate_while,
            'foreach': self.generate_foreach,
            'parallel': self.generate_parallel,
            'assert': self.generate_assert,
            'event': self.generate_event,
            'require_role': self.generate_require_role,
            'ai_infer': self.generate_ai_infer,
            'ai_train': self.generate_ai_train,
            'ai_classify': self.generate_ai_classify,
            'ai_embed': self.generate_ai_embed,
            'ai_explain': self.generate_ai_explain,
            'quantum_circuit': self.generate_quantum_circuit,
            'quantum_measure': self.generate_quantum_measure,
            'quantum_algorithm': self.generate_quantum_algorithm,
            'blockchain_operation': self.generate_blockchain_operation,
            'crypto_sign': self.generate_crypto_sign,
            'crypto_verify': self.generate_crypto_verify,
            'regex_match': self.generate_regex_match,
            'audit_log': self.generate_audit_log,
            'call_workflow': self.generate_call_workflow
        }
        handler = handlers.get(step_type)
        if handler:
            code = handler(step)
        elif step_type.startswith('custom_'):
            code = self.generate_custom(step)
        else:
            code = f"        // Unsupported step type: {step_type}"
        if step.get('ui'):
            code = f"{code}\n        // UI: {json.dumps(step['ui'])}"
        return self._indent_code(code, indent)

    def generate_set(self, step: Dict[str, Any]) -> str:
        target = step.get('target')
        if not isinstance(target, str) or not target:
            raise ValueError("Invalid or missing target in set step")
        value = self._safe_format_expr(step['value'])
        return f"context['{target}'] = {value};"

    def generate_if(self, step: Dict[str, Any]) -> str:
        condition = self._safe_format_expr(step['condition'])
        then_code = "\n".join(self.generate_step(s, indent=3) for s in step['then'])
        else_code = "\n".join(self.generate_step(s, indent=3) for s in step.get('else', []))
        code = [f"if ({condition}) {{", then_code, "        }}"]
        if else_code:
            code.append("        else {")
            code.append(else_code)
            code.append("        }")
        return "\n".join(code)

    def generate_return(self, step: Dict[str, Any]) -> str:
        value = self._safe_format_expr(step['value'])
        return f"context['result'] = {value}; return context['result'];"

    def generate_try(self, step: Dict[str, Any]) -> str:
        body_code = "\n".join(self.generate_step(s, indent=3) for s in step['body'])
        catch = step.get('catch', {})
        catch_code = "\n".join(self.generate_step(s, indent=3) for s in catch.get('body', [])) if catch else ""
        finally_code = "\n".join(self.generate_step(s, indent=3) for s in step.get('finally', []))
        code = ["{  // Simulated try block", body_code]
        if catch_code:
            error_var = catch.get('error_var', 'error')
            if not re.match(r'^[a-zA-Z_][a-zA-Z0-9_]*$', error_var):
                raise ValueError(f"Invalid error variable name: {error_var}")
            code.append(f"        // Simulated catch for {error_var}")
            code.append(f"        context['{error_var}'] = bytes32(keccak256(abi.encodePacked(\"error\")));")
            code.append(catch_code)
        if finally_code:
            code.append("        // Simulated finally")
            code.append(finally_code)
        code.append("        }")
        return "\n".join(code)

    def generate_while(self, step: Dict[str, Any]) -> str:
        condition = self._safe_format_expr(step['condition'])
        body_code = "\n".join(self.generate_step(s, indent=3) for s in step['body'])
        return f"while ({condition}) {{\n{body_code}\n        }}"

    def generate_foreach(self, step: Dict[str, Any]) -> str:
        collection = self._safe_format_expr(step['collection'])
        iterator = step['iterator']
        if not re.match(r'^[a-zA-Z_][a-zA-Z0-9_]*$', iterator):
            raise ValueError(f"Invalid iterator name: {iterator}")
        body_code = "\n".join(self.generate_step(s, indent=3) for s in step['body'])
        return f"// Simulated foreach over {collection}\nfor (uint256 i = 0; i < 10; i++) {{\n    context['{iterator}'] = bytes32(i);\n{body_code}\n        }}"

    def generate_parallel(self, step: Dict[str, Any]) -> str:
        branches = step.get('branches', [])
        branch_codes = [
            "\n".join(self.generate_step(s, indent=3) for s in branch)
            for branch in branches
        ]
        return "\n".join([f"// Simulated parallel branch {i}\n{code}" for i, code in enumerate(branch_codes)])

    def generate_assert(self, step: Dict[str, Any]) -> str:
        condition = self._safe_format_expr(step['condition'])
        message = step.get('message', 'Assertion failed')
        if not isinstance(message, str):
            raise ValueError("Assert message must be a string")
        return f"require({condition}, \"{message}\");"

    def generate_event(self, step: Dict[str, Any]) -> str:
        name = step.get('name')
        params = step.get('params', {})
        param = next(iter(params.values()), "''")
        value = self._safe_format_expr(param)
        return f"emit {name}('{name}', {value});"

    def generate_require_role(self, step: Dict[str, Any]) -> str:
        role = step.get('role')
        return f"require(context['user_roles'] == bytes32(keccak256(abi.encodePacked('{role}'))), \"Missing role: {role}\");"

    def generate_ai_infer(self, step: Dict[str, Any]) -> str:
        model = step.get('model')
        input_data = self._safe_format_expr(step['input'])
        target = step.get('target')
        if not model or not target:
            raise ValueError("Missing model or target in ai_infer step")
        return f"context['{target}'] = simulateAiInfer('{model}', {input_data});"

    def generate_ai_train(self, step: Dict[str, Any]) -> str:
        model = step.get('model')
        data = self._safe_format_expr(step['data'])
        target = step.get('target')
        return f"context['{target}'] = simulateAiTrain('{model}', {data});"

    def generate_ai_classify(self, step: Dict[str, Any]) -> str:
        model = step.get('model')
        input_data = self._safe_format_expr(step['input'])
        target = step.get('target')
        return f"context['{target}'] = simulateAiClassify('{model}', {input_data});"

    def generate_ai_embed(self, step: Dict[str, Any]) -> str:
        model = step.get('model')
        input_data = self._safe_format_expr(step['input'])
        target = step.get('target')
        return f"context['{target}'] = simulateAiEmbed('{model}', {input_data});"

    def generate_ai_explain(self, step: Dict[str, Any]) -> str:
        model = step.get('model')
        input_data = self._safe_format_expr(step['input'])
        target = step.get('target')
        return f"context['{target}'] = simulateAiExplain('{model}', {input_data});"

    def generate_quantum_circuit(self, step: Dict[str, Any]) -> str:
        gates = step.get('gates', [])
        qubits = step.get('qubits')
        target = step.get('target')
        if not gates or not qubits or not target:
            raise ValueError("Missing gates, qubits, or target in quantum_circuit step")
        return f"context['{target}'] = bytes32({qubits});"

    def generate_quantum_measure(self, step: Dict[str, Any]) -> str:
        circuit = self._safe_format_expr(step['circuit'])
        target = step.get('target')
        return f"context['{target}'] = {circuit};"

    def generate_quantum_algorithm(self, step: Dict[str, Any]) -> str:
        algorithm = step.get('algorithm')
        params = json.dumps(step.get('parameters', {}))
        target = step.get('target')
        return f"context['{target}'] = simulateQuantumAlgorithm('{algorithm}', bytes32(keccak256(abi.encodePacked('{params}'))));"

    def generate_blockchain_operation(self, step: Dict[str, Any]) -> str:
        chain = step.get('chain')
        action = step.get('action')
        params = step.get('params', {})
        target = step.get('target')
        if chain == "ethereum" and action == "transfer":
            to_address = params.get('to')
            value = params.get('value')
            if not to_address or not re.match(r'^0x[a-fA-F0-9]{40}$', to_address):
                raise ValueError(f"Invalid Ethereum address: {to_address}")
            if not value or not isinstance(value, (int, str, float)):
                raise ValueError(f"Invalid value for transfer: {value}")
            return "\n".join([
                f"address payable recipient = payable(address(uint160(uint256(keccak256(abi.encodePacked('{to_address}'))))));",
                f"require(recipient.send({value}), \"Transfer failed\");",
                f"context['{target}'] = bytes32(keccak256(abi.encodePacked('{to_address}', {value})));"
            ])
        return f"// Unsupported blockchain operation: {chain} {action}"

    def generate_crypto_sign(self, step: Dict[str, Any]) -> str:
        algorithm = step.get('algorithm')
        data = self._safe_format_expr(step['data'])
        key = self._safe_format_expr(step['key'])
        target = step.get('target')
        return f"context['{target}'] = simulateCryptoSign('{algorithm}', {data}, {key});"

    def generate_crypto_verify(self, step: Dict[str, Any]) -> str:
        algorithm = step.get('algorithm')
        data = self._safe_format_expr(step['data'])
        signature = self._safe_format_expr(step['signature'])
        key = self._safe_format_expr(step['key'])
        target = step.get('target')
        return f"context['{target}'] = simulateCryptoVerify('{algorithm}', {data}, {signature}, {key}) ? bytes32(1) : bytes32(0);"

    def generate_regex_match(self, step: Dict[str, Any]) -> str:
        pattern = step.get('pattern')
        input_data = self._safe_format_expr(step['input'])
        target = step.get('target')
        return f"context['{target}'] = bytes32(keccak256(abi.encodePacked('{pattern}', {input_data})));"

    def generate_audit_log(self, step: Dict[str, Any]) -> str:
        message = step.get('message')
        metadata = json.dumps(step.get('metadata', {}))
        return f"emit AuditLog('{message}', bytes32(keccak256(abi.encodePacked('{metadata}'))));"

    def generate_call_workflow(self, step: Dict[str, Any]) -> str:
        workflow_id = step.get('workflow')
        target = step.get('target')
        args = json.dumps(step.get('args', {}))
        return f"context['{target}'] = simulateWorkflow('{workflow_id}', bytes32(keccak256(abi.encodePacked('{args}'))));"

    def generate_custom(self, step: Dict[str, Any]) -> str:
        custom_type = step.get('type')
        props = step.get('custom_properties', {})
        return f"// Custom step: {custom_type} with properties {json.dumps(props)}"

    def _safe_format_expr(self, expr: Any) -> str:
        expr_key = json.dumps(expr)
        if expr_key in self._expr_cache:
            return self._expr_cache[expr_key]
        formatted = self._format_expr(expr)
        formatted = re.sub(r"context\.get\(['\"](.*?)['\"]\)", r"context['\1']", formatted)
        self._expr_cache[expr_key] = formatted
        return formatted

    def _format_expr(self, expr: Any) -> str:
        if not isinstance(expr, dict):
            return f"bytes32(keccak256(abi.encodePacked({json.dumps(expr)})))"
        if 'get' in expr:
            return f"context['{expr['get']}']"
        if 'value' in expr:
            return f"bytes32(keccak256(abi.encodePacked({json.dumps(expr['value'])})))"
        if 'add' in expr:
            return f"uint256({'+'.join(self._format_expr(e) for e in expr['add'])})"
        if 'subtract' in expr:
            return f"uint256({'-'.join(self._format_expr(e) for e in expr['subtract'])})"
        if 'multiply' in expr:
            return f"uint256({'*'.join(self._format_expr(e) for e in expr['multiply'])})"
        if 'divide' in expr:
            return f"uint256({'/'.join(self._format_expr(e) for e in expr['divide'])})"
        if 'compare' in expr:
            op_map = {'===': '==', '!==': '!='}
            op = op_map.get(expr['compare']['op'], expr['compare']['op'])
            return f"({self._format_expr(expr['compare']['left'])} {op} {self._format_expr(expr['compare']['right'])})"
        if 'not' in expr:
            return f"!({self._format_expr(expr['not'])})"
        if 'and' in expr:
            return f"({' && '.join(self._format_expr(e) for e in expr['and'])})"
        if 'or' in expr:
            return f"({' || '.join(self._format_expr(e) for e in expr['or'])})"
        if 'concat' in expr:
            return f"bytes32(keccak256(abi.encodePacked({','.join(self._format_expr(e) for e in expr['concat'])})))"
        if 'hash' in expr:
            return f"bytes32(keccak256(abi.encodePacked({self._format_expr(expr['hash']['input'])})))"
        if 'regex' in expr:
            return f"bytes32(keccak256(abi.encodePacked('{expr['regex']['pattern']}', {self._format_expr(expr['regex']['input'])})))"
        raise ValueError(f"Unsupported expression: {expr}")

    def _indent_code(self, code: str, indent: int) -> str:
        indent_str = " " * (indent * self._indent_level)
        return "\n".join(indent_str + line for line in code.split("\n") if line.strip())

def register_solidity_generator():
    from engine.generator import register_generator
    register_generator('solidity', SolidityGenerator)